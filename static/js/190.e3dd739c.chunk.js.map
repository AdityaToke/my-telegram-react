{"version":3,"file":"static/js/190.e3dd739c.chunk.js","mappings":"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","sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation from '../Message/Media/Animation';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    render() {\n        const { animation } = this.props;\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    type='preview'\n                    stretch={true}\n                    animation={animation}\n                    style={{ borderRadius: 0 }}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        // console.log('[header] setPosition', position);\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        // console.log('[header] handleSelect', stickers.indexOf(sticker));\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { recent, stickers } = this.props;\n\n        const recentItem = recent ?\n            <div\n                className='stickers-picker-header-recent'\n                onClick={() => this.handleSelect('recent')}>\n                <AccessTimeIcon/>\n            </div> :\n            null;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={36}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className={classNames('stickers-picker-header-scroll', 'scrollbars-hidden')} onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>\n                        {recentItem}\n                        {items}\n                    </div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    recent: PropTypes.object,\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    stop() {\n\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { recent, sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let startPosition = 0;\n        if (recent && recent.stickers.length > 0) {\n            startPosition = 1;\n            const element = this.itemsMap.get('recent');\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = 0;\n                        }\n                    }\n                }\n            }\n        }\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = startPosition + pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        this.scrolling = true;\n        const now = new Date();\n        this.lastScrollTime = now;\n        if (this.scrollTimer) clearTimeout(this.scrollTimer);\n        this.scrollTimer = setTimeout(() => {\n            if (now !== this.lastScrollTime) return;\n\n            this.scrolling = false;\n        }, 250);\n\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position === -1) {\n            const scroll = scrollRef.current;\n            scroll.scrollTop = 0;\n        } else if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker' style={style}>\n                <StickersPickerHeader\n                    recent={recentInfo}\n                    stickers={headerStickers}\n                    onSelect={this.handleSelectSet} />\n                <div ref={this.scrollRef} className={classNames('stickers-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            ref={el => this.itemsMap.set('recent', el)}\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { mapEquals, debounce, throttle } from '../../Utils/Common';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n\n            this.forceUpdate(() => {\n                this.start();\n            });\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return;\n\n        const { animations } = savedAnimations;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (mapEquals(animationsInView, inViewMap)) {\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        // console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const { savedAnimations } = AnimationStore;\n\n                    const sticker = savedAnimations.animations[stickerId];\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        // this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        // this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { savedAnimations } = AnimationStore;\n\n        const sticker = savedAnimations.animations[stickerId];\n        onPreview(sticker);\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    openAnimation = animation => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(animation);\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            <div\n                data-animation-index={index}\n                key={`${index}_${x.animation.id}`}\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                >\n                <Animation\n                    type='picker'\n                    animation={x}\n                    openMedia={() => this.openAnimation(x)}\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='gifs-picker' style={style}>\n                <div ref={this.scrollRef} className={classNames('gifs-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        const { open } = this.state;\n\n        if (open) {\n            this.removePicker = true;\n        } else {\n            this.picker = null;\n        }\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n\n            if (this.state.tab === 2) {\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.start();\n                }\n            }\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        // return;\n\n        const { animation, sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open }, () => {\n            if (!this.state.open) {\n                if (this.removePicker) {\n                    this.picker = null;\n                    this.removePicker = false;\n                }\n\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.stop();\n                }\n            }\n        });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        // console.log('[sp] handleStickersClick');\n\n        if (tab === 1) {\n            if (stickersPicker) {\n                stickersPicker.scrollTop();\n            }\n        } else {\n            setTimeout(() => {\n                // console.log('[sp] handleStickersClick.loadContent');\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n            }, 150);\n\n            this.setState({ tab: 1 });\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n\n        if (tab === 2) {\n            if (gifsPicker) {\n                gifsPicker.scrollTop();\n            }\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                    style={{ position: 'absolute', left: 338, top: 0 }}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                </div>\n                {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                {Boolean(animation) && <AnimationPreview animation={animation} />}\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"names":["AnimationPreview","animation","this","props","className","Animation","type","stretch","style","borderRadius","React","StickerSet","nextProps","nextState","nextContext","info","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","IconButton","classes","root","size","Clear","fontSize","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","StickerStore","prevProps","prevState","snapshot","recent","recentItem","AccessTime","play","openMedia","ref","classNames","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","stickerSets","sets","TdLibController","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","startPosition","element","diff","pos","handleScroll","scrolling","now","Date","lastScrollTime","scrollTimer","clearTimeout","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","mapEquals","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","theme","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","Button","withTheme"],"sourceRoot":""}